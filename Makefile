# Makefile pour Bot Discord Monitoring d'Alternances

.PHONY: help install setup test run clean

# Variables
PYTHON := python
PIP := pip
VENV := venv

help: ## Affiche cette aide
	@echo "Bot Discord - Monitoring d'Alternances"
	@echo "====================================="
	@echo ""
	@echo "Commandes disponibles:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

install: ## Installe toutes les d√©pendances
	@echo "üì¶ Installation des d√©pendances..."
	$(PIP) install -r requirements.txt
	@echo "‚úÖ Installation termin√©e"

venv: ## Cr√©e un environnement virtuel
	@echo "üêç Cr√©ation de l'environnement virtuel..."
	$(PYTHON) -m venv $(VENV)
	@echo "‚úÖ Environnement virtuel cr√©√© dans ./$(VENV)"
	@echo "üí° Activez-le avec: source venv/bin/activate (Linux/Mac) ou venv\\Scripts\\activate (Windows)"

setup: ## Configure la base de donn√©es
	@echo "üóÑÔ∏è Configuration de la base de donn√©es..."
	$(PYTHON) scripts/setup_database.py
	@echo "‚úÖ Base de donn√©es configur√©e"

test: ## Teste tous les scrapers
	@echo "üß™ Test de tous les scrapers..."
	$(PYTHON) scripts/test_scrapers.py --all

test-system: ## Teste le syst√®me complet
	@echo "üîÑ Test du syst√®me complet..."
	$(PYTHON) scripts/test_scrapers.py --system

test-site: ## Teste un site sp√©cifique (usage: make test-site SITE=indeed)
	@echo "üß™ Test du site $(SITE)..."
	$(PYTHON) scripts/test_scrapers.py $(SITE)

run: ## Lance le bot
	@echo "üöÄ Lancement du bot..."
	$(PYTHON) run.py

run-dev: ## Lance le bot en mode d√©veloppement
	@echo "üöÄ Lancement du bot (mode dev)..."
	$(PYTHON) src/main.py

clean: ## Nettoie les fichiers temporaires
	@echo "üßπ Nettoyage..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/ dist/
	@echo "‚úÖ Nettoyage termin√©"

logs: ## Affiche les logs r√©cents
	@echo "üìã Logs r√©cents:"
	@tail -n 50 logs/bot.log 2>/dev/null || echo "Aucun log trouv√©"

check-config: ## V√©rifie la configuration
	@echo "‚öôÔ∏è V√©rification de la configuration..."
	@$(PYTHON) -c "from src.config.settings import Settings; s=Settings(); print('‚úÖ Configuration valide' if s.validate() else '‚ùå Configuration invalide')"

db-reset: ## Remet √† z√©ro la base de donn√©es (ATTENTION: supprime tout!)
	@echo "‚ö†Ô∏è Remise √† z√©ro de la base de donn√©es..."
	$(PYTHON) scripts/setup_database.py --reset

format: ## Formate le code avec black (optionnel)
	@echo "üé® Formatage du code..."
	@black src/ scripts/ || echo "Black non install√©, ignor√©"

lint: ## V√©rifie la qualit√© du code (optionnel)
	@echo "üîç V√©rification du code..."
	@flake8 src/ scripts/ || echo "Flake8 non install√©, ignor√©"

requirements: ## Met √† jour le fichier requirements.txt
	@echo "üìã G√©n√©ration de requirements.txt..."
	$(PIP) freeze > requirements.txt
	@echo "‚úÖ Requirements mis √† jour"

backup-db: ## Sauvegarde la base de donn√©es (PostgreSQL)
	@echo "üíæ Sauvegarde de la base de donn√©es..."
	@pg_dump -h localhost -U postgres alternance_bot > backup_$(shell date +%Y%m%d_%H%M%S).sql || echo "Erreur sauvegarde DB"

# Commandes pour le d√©veloppement
dev-install: venv ## Installation compl√®te pour d√©veloppement
	@echo "üîß Installation d√©veloppement..."
	./$(VENV)/bin/pip install -r requirements.txt
	./$(VENV)/bin/pip install black flake8 pytest
	@echo "‚úÖ Environnement de dev pr√™t"

# Aide d√©taill√©e
info: ## Informations sur le projet
	@echo "Bot Discord - Monitoring d'Alternances"
	@echo "====================================="
	@echo "Version Python: $(shell python --version 2>&1)"
	@echo "R√©pertoire: $(shell pwd)"
	@echo "Config: $(shell test -f .env && echo '‚úÖ .env trouv√©' || echo '‚ùå .env manquant')"
	@echo "Logs: $(shell test -f logs/bot.log && echo '‚úÖ Logs pr√©sents' || echo '‚ÑπÔ∏è Pas encore de logs')"