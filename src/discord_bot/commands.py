"""
Commandes Discord pour la gestion des m√©tiers et pr√©f√©rences
"""

import discord
from discord.ext import commands
from typing import List

def setup_commands(bot):
    """Configure toutes les commandes du bot"""

    @bot.command(name='help')
    async def help_command(ctx):
        """Affiche l'aide du bot"""
        embed = discord.Embed(
            title="ü§ñ Bot Alternance - Aide",
            description="Bot de monitoring d'offres d'alternance en temps r√©el",
            color=discord.Color.blue()
        )

        embed.add_field(
            name="üìã Commandes principales",
            value="""
            `!alt help` - Affiche cette aide
            `!alt ping` - Teste la latence
            `!alt status` - Statut du bot
            """,
            inline=False
        )

        embed.add_field(
            name="üéØ Gestion des m√©tiers",
            value="""
            `!alt metiers` - Liste des m√©tiers disponibles
            `!alt subscribe <id>` - S'abonner √† un m√©tier
            `!alt unsubscribe <id>` - Se d√©sabonner d'un m√©tier
            `!alt mes-metiers` - Mes m√©tiers suivis
            """,
            inline=False
        )

        embed.add_field(
            name="‚öôÔ∏è Pr√©f√©rences",
            value="""
            `!alt profil` - Voir mon profil
            `!alt lieu <ville>` - D√©finir ma localisation
            `!alt recent [m√©tier]` - Offres r√©centes
            """,
            inline=False
        )

        embed.set_footer(text="Pr√©fixe des commandes: !alt")
        await ctx.send(embed=embed)

    @bot.command(name='metiers')
    async def list_metiers(ctx):
        """Liste tous les m√©tiers disponibles"""
        try:
            metiers = await bot.db_manager.get_all_metiers()

            if not metiers:
                await ctx.send("‚ùå Aucun m√©tier configur√©.")
                return

            # Grouper par cat√©gorie
            categories = {}
            for metier in metiers:
                cat = metier.category or "Autres"
                if cat not in categories:
                    categories[cat] = []
                categories[cat].append(metier)

            embed = discord.Embed(
                title="üéØ M√©tiers disponibles",
                description="Utilisez `!alt subscribe <id>` pour vous abonner",
                color=discord.Color.green()
            )

            for category, metiers_list in categories.items():
                metiers_text = "\n".join([
                    f"`{metier.id}` - {metier.nom}"
                    for metier in metiers_list
                ])
                embed.add_field(
                    name=f"üìÇ {category}",
                    value=metiers_text,
                    inline=False
                )

            await ctx.send(embed=embed)

        except Exception as e:
            bot.logger.error(f"Erreur liste m√©tiers: {e}")
            await ctx.send("‚ùå Erreur lors de la r√©cup√©ration des m√©tiers.")

    @bot.command(name='subscribe')
    async def subscribe_metier(ctx, metier_id: int = None):
        """S'abonner √† un m√©tier"""
        if metier_id is None:
            await ctx.send("‚ùå Veuillez sp√©cifier l'ID du m√©tier. Utilisez `!alt metiers` pour voir la liste.")
            return

        try:
            # Cr√©er ou r√©cup√©rer l'utilisateur
            user = await bot.db_manager.create_or_update_user(
                discord_id=str(ctx.author.id),
                username=ctx.author.display_name
            )

            # V√©rifier que le m√©tier existe
            metier = await bot.db_manager.get_metier_by_id(metier_id)
            if not metier:
                await ctx.send(f"‚ùå M√©tier avec l'ID {metier_id} introuvable.")
                return

            # Ajouter le m√©tier
            success = await bot.db_manager.add_user_metier(str(ctx.author.id), metier_id)

            if success:
                await ctx.send(f"‚úÖ Vous √™tes maintenant abonn√© au m√©tier **{metier.nom}**!")
            else:
                await ctx.send(f"‚ÑπÔ∏è Vous √™tes d√©j√† abonn√© au m√©tier **{metier.nom}**.")

        except Exception as e:
            bot.logger.error(f"Erreur subscribe: {e}")
            await ctx.send("‚ùå Erreur lors de l'abonnement.")

    @bot.command(name='unsubscribe')
    async def unsubscribe_metier(ctx, metier_id: int = None):
        """Se d√©sabonner d'un m√©tier"""
        if metier_id is None:
            await ctx.send("‚ùå Veuillez sp√©cifier l'ID du m√©tier.")
            return

        try:
            # V√©rifier que le m√©tier existe
            metier = await bot.db_manager.get_metier_by_id(metier_id)
            if not metier:
                await ctx.send(f"‚ùå M√©tier avec l'ID {metier_id} introuvable.")
                return

            # Retirer le m√©tier
            success = await bot.db_manager.remove_user_metier(str(ctx.author.id), metier_id)

            if success:
                await ctx.send(f"‚úÖ Vous √™tes maintenant d√©sabonn√© du m√©tier **{metier.nom}**.")
            else:
                await ctx.send(f"‚ÑπÔ∏è Vous n'√©tiez pas abonn√© au m√©tier **{metier.nom}**.")

        except Exception as e:
            bot.logger.error(f"Erreur unsubscribe: {e}")
            await ctx.send("‚ùå Erreur lors du d√©sabonnement.")

    @bot.command(name='mes-metiers')
    async def my_metiers(ctx):
        """Affiche les m√©tiers suivis par l'utilisateur"""
        try:
            user = await bot.db_manager.get_user_by_discord_id(str(ctx.author.id))

            if not user or not user.metiers:
                await ctx.send("‚ÑπÔ∏è Vous ne suivez aucun m√©tier. Utilisez `!alt metiers` pour voir la liste disponible.")
                return

            embed = discord.Embed(
                title="üéØ Vos m√©tiers suivis",
                description=f"{ctx.author.display_name}, voici vos abonnements:",
                color=discord.Color.blue()
            )

            metiers_text = "\n".join([
                f"‚Ä¢ **{metier.nom}** (ID: {metier.id})"
                for metier in user.metiers
            ])

            embed.add_field(
                name="üìã M√©tiers",
                value=metiers_text,
                inline=False
            )

            if user.preferred_location:
                embed.add_field(
                    name="üìç Localisation pr√©f√©r√©e",
                    value=user.preferred_location,
                    inline=True
                )

            await ctx.send(embed=embed)

        except Exception as e:
            bot.logger.error(f"Erreur mes-metiers: {e}")
            await ctx.send("‚ùå Erreur lors de la r√©cup√©ration de vos m√©tiers.")

    @bot.command(name='profil')
    async def show_profile(ctx):
        """Affiche le profil utilisateur"""
        try:
            user = await bot.db_manager.get_user_by_discord_id(str(ctx.author.id))

            if not user:
                await ctx.send("‚ÑπÔ∏è Profil non trouv√©. Utilisez une commande pour cr√©er votre profil.")
                return

            embed = discord.Embed(
                title="üë§ Votre profil",
                color=discord.Color.blue()
            )

            embed.add_field(
                name="üÜî Nom d'utilisateur",
                value=user.username,
                inline=True
            )

            embed.add_field(
                name="üìÖ Membre depuis",
                value=user.created_at.strftime("%d/%m/%Y"),
                inline=True
            )

            embed.add_field(
                name="üéØ M√©tiers suivis",
                value=str(len(user.metiers)) if user.metiers else "0",
                inline=True
            )

            if user.preferred_location:
                embed.add_field(
                    name="üìç Localisation",
                    value=user.preferred_location,
                    inline=True
                )

            if user.max_distance:
                embed.add_field(
                    name="üìè Rayon de recherche",
                    value=f"{user.max_distance} km",
                    inline=True
                )

            embed.add_field(
                name="üîî Statut",
                value="Actif" if user.is_active else "Inactif",
                inline=True
            )

            await ctx.send(embed=embed)

        except Exception as e:
            bot.logger.error(f"Erreur profil: {e}")
            await ctx.send("‚ùå Erreur lors de la r√©cup√©ration du profil.")

    @bot.command(name='lieu')
    async def set_location(ctx, *, location: str = None):
        """D√©finit la localisation pr√©f√©r√©e"""
        if not location:
            await ctx.send("‚ùå Veuillez sp√©cifier une ville. Exemple: `!alt lieu Paris`")
            return

        try:
            # Cr√©er ou mettre √† jour l'utilisateur
            user = await bot.db_manager.create_or_update_user(
                discord_id=str(ctx.author.id),
                username=ctx.author.display_name,
                preferred_location=location
            )

            await ctx.send(f"‚úÖ Votre localisation a √©t√© d√©finie sur **{location}**.")

        except Exception as e:
            bot.logger.error(f"Erreur set location: {e}")
            await ctx.send("‚ùå Erreur lors de la sauvegarde de la localisation.")

    @bot.command(name='recent')
    async def show_recent_jobs(ctx, metier_id: int = None):
        """Affiche les offres r√©centes"""
        try:
            jobs = await bot.db_manager.get_recent_offres(metier_id=metier_id, hours=24)

            if not jobs:
                await ctx.send("‚ÑπÔ∏è Aucune offre r√©cente trouv√©e.")
                return

            embed = discord.Embed(
                title="üìã Offres r√©centes (24h)",
                color=discord.Color.orange()
            )

            # Limiter √† 10 offres pour √©viter de d√©passer la limite Discord
            for job in jobs[:10]:
                job_info = f"üè¢ {job.entreprise or 'N/A'}\nüìç {job.lieu or 'N/A'}\nüåê {job.source_site}"

                embed.add_field(
                    name=job.titre,
                    value=job_info,
                    inline=True
                )

            if len(jobs) > 10:
                embed.set_footer(text=f"... et {len(jobs) - 10} autres offres")

            await ctx.send(embed=embed)

        except Exception as e:
            bot.logger.error(f"Erreur recent jobs: {e}")
            await ctx.send("‚ùå Erreur lors de la r√©cup√©ration des offres r√©centes.")

    # Commandes administrateur
    @bot.command(name='admin-stats')
    @commands.has_permissions(administrator=True)
    async def admin_stats(ctx):
        """Statistiques administrateur (r√©serv√© aux admins)"""
        try:
            # Statistiques de base (√† impl√©menter selon les besoins)
            embed = discord.Embed(
                title="üìä Statistiques administrateur",
                color=discord.Color.gold()
            )

            # Compter les utilisateurs actifs
            # (n√©cessiterait une m√©thode dans le database manager)

            embed.add_field(
                name="ü§ñ Statut bot",
                value="Op√©rationnel",
                inline=True
            )

            embed.add_field(
                name="üîç Monitoring",
                value="Actif" if bot.monitoring_active else "Inactif",
                inline=True
            )

            embed.add_field(
                name="üåê Sites surveill√©s",
                value=", ".join(bot.settings.get_enabled_sites()),
                inline=False
            )

            await ctx.send(embed=embed)

        except Exception as e:
            bot.logger.error(f"Erreur admin stats: {e}")
            await ctx.send("‚ùå Erreur lors de la r√©cup√©ration des statistiques.")